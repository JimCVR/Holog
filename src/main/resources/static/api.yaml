openapi: 3.0.3
info:
  title: Swagger Holog - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: Categories
    description: Everything about categories
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: Items
    description: The elements within the categories
    externalDocs:
      description: Find out more about items
      url: http://swagger.io
paths:
  /user/{user-id}/categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Returns all categories
      operationId: getCategories
      parameters:
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid User ID supplied
        '404':
          description: Category not found
      security:
        - api_key: []
        
    post:
      tags:
        - Categories
      summary: Creates a category
      description: ''
      operationId: insertCategory
      parameters:
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Creates a category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
        
        
      responses:
        '405':
          description: Invalid input
            
  /user/{user-id}/categories/{id}:
    get:
      tags:
        - Categories
      summary: Find category by ID
      description: Returns a single category
      operationId: getCategoryById
      parameters:
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: category id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
      security:
        - api_key: []
    put:
      tags:
        - Categories
      summary: Update an existing category
      description: Update an existing category by Id
      operationId: updateCategory
      parameters:
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: category id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
        '405':
          description: Validation exception
            
    delete:
      tags:
        - Categories
      summary: Deletes a category
      description: deletes a categrory
      operationId: deleteCategory
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: category id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid id category value
            
  /user/{user-id}/items:
    get:
      tags:
        - Items
      summary: Get all items
      description: Returns all items
      operationId: getItems
      parameters:
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
      security:
        - api_key: []

    post:
      tags:
        - Items
      summary: Creates an item
      description: ''
      operationId: updateItemWithForm
      parameters:
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Creates an item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '405':
          description: Invalid input
            
    
            
  /user/{user-id}/items/{id}:
    get:
      tags:
        - Items
      summary: Find item by ID
      description: Returns a single item
      operationId: getItemById
      parameters:
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: item id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
      security:
        - api_key: []
            
    put:
      tags:
        - Items
      summary: Update an existing item
      description: Update an existing item by Id
      operationId: updateItem
      parameters:
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: item id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
            
    delete:
      tags:
        - Items
      summary: Deletes an item
      description: deletes an item
      operationId: deleteItem
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: item id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid item value
          
  /user/{user-id}/items/{category-id}:
    get:
      tags:
        - Items
      summary: Get all items from category
      description: Returns all items from category
      operationId: getItemsByCategory
      parameters:
        - name: user-id
          in: path
          description: category owner user id
          required: true
          schema:
            type: integer
            format: int64
        - name: category-id
          in: path
          description: category id
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetailed'          
            application/xml:
              schema:
                $ref: '#/components/schemas/CategoryDetailed'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
      security:
        - api_key: []
            
components:
  schemas:
    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: "FooCategory"
        icon-id:
          type: integer
          format: int32
          example: 10
      xml:
        name: Category
        
    CategoryDetailed:
      allOf:
        - $ref: '#/components/schemas/Category'
        - type: object
      properties:
        items:
          type: array
          xml:
            name: items
            wrapped: true
          items:
            $ref: '#/components/schemas/Item'
      xml:
        name: CategoryDetailed
        
    Item:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 1000
        name:
          type: string
          example: "fooItem"
        description:
           type: string
           example: "lorem ipsum dolor"
        author:
           type: string
           example: "John Doe"
        category-id:
          type: integer
          format: int64
          example: 10
      xml:
        name: Item

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    CategoryDetailed:
      description: Category object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CategoryDetailed'
        application/xml:
          schema:
            $ref: '#/components/schemas/CategoryDetailed'
    
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header